#!/bin/zsh

CD_BOOKMARKS_DIR=~/scripts/.cd_bookmarks

# cd bookmarks
# Usage:
# cdb - make a bookmark with the current directory name
# cdb <bookmark> - go to the bookmark
# cdb -d - delete a bookmark for the current directory
# cdb -d <bookmark> - delete the bookmark
# cdb -e - edit the bookmarks directory
# cdb -h - print this help message
# cdb -l - list all bookmarks
# cdb -m <bookmark> <new_name> - rename the bookmark
# cdb -m <new_name> - rename the bookmark with the current directory name
# cdb -n - make a bookmark with the current directory name
# cdb -n <bookmark> - make a bookmark with the name <bookmark>
function cdb() {
	if  [ ! -e "$CD_BOOKMARKS_DIR" ]; then
		echo "No bookmarks directory found"
		return
	fi

	local cwd="${PWD##*/}"

	# If there are no arguments, make a bookmark with the current directory name
	if (( $# == 0 )); then
		echo "$PWD" > "$CD_BOOKMARKS_DIR/$cwd"
		return
	fi

	case $1 in
		-d) shift
			# Handle the case where the bookmark name is given
			if (($# == 1)); then
				if [[ -e "$CD_BOOKMARKS_DIR/$1" ]]; then
					echo "Deleting: $1"
					rm "$CD_BOOKMARKS_DIR/$1"
				else
					echo "Can't find the bookmark to delete"
				fi
				return
			fi

			# If we are not given the bookmark name, try and find it
			local to_rm="$(basename "$PWD")"

			# If there is no bookmark with the current directory name,
			# or the bookmark with the current directory name does not
			# point to the current directory, try and find a bookmark
			if [[ ! -f "$CD_BOOKMARKS_DIR/$to_rm" ]] ||\
				[[ "$(cat "$CD_BOOKMARKS_DIR/$to_rm")" != "$PWD" ]]; then
				to_rm=
				setopt null_glob # Don't error when there are no bookmarks
				# Linear search
				for f in "$CD_BOOKMARKS_DIR"/* "$CD_BOOKMARKS_DIR"/.*; do
					if [[ "$(cat "$f")" == "$PWD" ]]; then
						to_rm="$(basename "$f")"
						break
					fi
				done
			fi

			if [[ -z $to_rm ]]; then
				echo "Can't find the bookmark to delete"
			else
				echo "Deleting: $to_rm"
				rm "$CD_BOOKMARKS_DIR/$to_rm"
			fi
			;;
		-e)
			cd "$CD_BOOKMARKS_DIR"
			;;
		-h)
			echo "Usage:"
			echo "cdb\t\t\t\t- make a bookmark with the current directory name"
			echo "cdb <bookmark>\t\t\t- go to the bookmark"
			echo "cdb -d\t\t\t\t- delete a bookmark for the current directory"
			echo "cdb -d <bookmark>\t\t- delete the bookmark"
			echo "cdb -e\t\t\t\t- edit the bookmarks directory"
			echo "cdb -h\t\t\t\t- print this help message"
			echo "cdb -l\t\t\t\t- list all bookmarks"
			echo "cdb -m <bookmark> <new_name>\t- rename the bookmark"
			echo "cdb -m <new_name>\t\t- rename the bookmark with the current directory name"
			echo "cdb -n\t\t\t\t- make a bookmark with the current directory name"
			echo "cdb -n <bookmark>\t\t- make a bookmark with the name <bookmark>"
			;;
		-l)
			ls "$CD_BOOKMARKS_DIR" -A
			;;
		-m) shift
			if (($# == 2)); then
				mv "$CD_BOOKMARKS_DIR/$1" "$CD_BOOKMARKS_DIR/$2"
			elif (($# == 1)); then
				mv "$CD_BOOKMARKS_DIR/$cwd" "$CD_BOOKMARKS_DIR/$1"
			else
				echo "Can't move this bookmark, try again"
			fi
			;;
		-n) shift
			if (($# == 0)); then
				echo "$(pwd)" > "$CD_BOOKMARKS_DIR/$cwd"
			else
				for i in "$@"; do
					echo "$(pwd)" > "$CD_BOOKMARKS_DIR/$i"
				done
			fi
			;;
		*)
			if [[ -f "$CD_BOOKMARKS_DIR/${1%%/*}" ]]; then
				cd "$(cat "$CD_BOOKMARKS_DIR/${1%%/*}")/${1#${1%%/*}}"
			else
				echo "Hmm...it looks like this bookmark does not exist"
			fi
			;;
	esac
}

# Autocomplete
_cdb () {
	# undefined
	builtin autoload -XUz /usr/share/zsh/site-functions
}

